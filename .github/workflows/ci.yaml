name: CI

on:
  push:
    branches: ["feature/**", "multifeature/**", "fix/**", "hotfix/**", "chore/**", "docs/**"]
  pull_request:
    branches: ["main"]

env:
  PYTHON_VERSION: "3.11"
  COVERAGE_THRESHOLD: "85"
  SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}

jobs:
  quality:
    runs-on: ubuntu-latest
    outputs:
      tests: ${{ steps.test-summary.outputs.results }}
      coverage: ${{ steps.pytest.outputs.coverage }}
      lint: ${{ steps.lint.outputs.errors }}
      types: ${{ steps.types.outputs.errors }}
      bandit: ${{ steps.bandit.outputs.issues }}
      snyk: ${{ steps.snyk-process.outputs.snyk_issues }}
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      - uses: astral-sh/setup-uv@v3

      - run: uv sync --group ci --extra dev

      - id: lint
        run: |
          uv run ruff check . --exit-non-zero-on-fix > lint.log 2>&1
          ERRORS=$(grep -c "error" lint.log 2>/dev/null || echo 0)
          echo "errors=$ERRORS" >> $GITHUB_OUTPUT

      - id: types
        run: |
          uv run mypy src > types.log 2>&1
          ERRORS=$(grep -c "error:" types.log 2>/dev/null || echo 0)
          echo "errors=$ERRORS" >> $GITHUB_OUTPUT
      - name: 🧪 Run Tests with Coverage
        id: pytest
        run: |
          export PYTHONPATH=src/
          uv run pytest src/tests/ \
            --cov=src \
            --cov-report=xml:coverage.xml \
            --cov-report=term-missing \
            --cov-branch \
            --cov-fail-under=${COVERAGE_THRESHOLD} \
            --junit-xml=pytest.xml \
            -v --tb=short | tee pytest.log

          LINE_RATE=$(grep -oP 'line-rate="\K[^"]+' coverage.xml | head -1)
          COVERAGE=$(echo "$LINE_RATE * 100" | bc -l | awk '{printf "%.0f", $0}')
          echo "coverage=$COVERAGE" >> $GITHUB_OUTPUT

      - name: 📊 Upload Coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: ./coverage.xml
          fail_ci_if_error: false
        if: always()

      - name: 📋 Test Summary
        id: test-summary
        run: |
          sudo apt-get update -qq && sudo apt-get install -y xmlstarlet
          PASSED=$(xmlstarlet sel -t -v "//testcase[not(failure) and not(error) and not(skipped)]" pytest.xml | wc -l)
          FAILED=$(xmlstarlet sel -t -v "//testcase[failure or error]" pytest.xml | wc -l)
          SKIPPED=$(xmlstarlet sel -t -v "//testcase[skipped]" pytest.xml | wc -l)
          TOTAL=$((PASSED + FAILED + SKIPPED))
          echo "results=${PASSED}/${TOTAL} (${SKIPPED} skipped)" >> $GITHUB_OUTPUT

      - id: bandit
        run: |
          uv run bandit -r src -f json -o bandit.json
          COUNT=$(jq '.results | length' bandit.json || echo 0)
          echo "issues=$COUNT" >> $GITHUB_OUTPUT

      - id: snyk
        uses: snyk/actions/python@master
        env:
          SNYK_TOKEN: ${{ env.SNYK_TOKEN }}
        with:
          args: --json-file-output=snyk.json

      - id: snyk-process
        run: |
          COUNT=$(jq '.vulnerabilities | length' snyk.json || echo 0)
          echo "snyk_issues=$COUNT" >> $GITHUB_OUTPUT

      - uses: actions/upload-artifact@v4
        with:
          name: ci-artifacts
          path: |
            pytest.xml
            coverage.xml
            pytest.log
            lint.log
            types.log
            bandit.json
            snyk.json

  prerelease:
    runs-on: ubuntu-latest
    needs: quality
    outputs:
      new_release_version: ${{ steps.semrel.outputs.new_release_version }}
    if: |
      needs.quality.result == 'success' &&
      (startsWith(github.ref, 'refs/heads/feature/') ||
       startsWith(github.ref, 'refs/heads/multifeature/') ||
       startsWith(github.ref, 'refs/heads/fix/') ||
       startsWith(github.ref, 'refs/heads/hotfix/') ||
       github.event_name == 'pull_request')
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      - uses: astral-sh/setup-uv@v3
      - run: uv sync --group build
      - name: Dry-run semantic-release
        id: semrel
        uses: cycjimmy/semantic-release-action@v4
        with:
          semantic_version: 20
          extra_plugins: |
            @semantic-release/changelog
            @semantic-release/git
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  pr-comment:
    runs-on: ubuntu-latest
    needs: [quality, prerelease]
    if: github.event_name == 'pull_request'
    steps:
      - uses: actions/github-script@v7
        with:
          script: |
            const tests = "${{ needs.quality.outputs.tests }}";
            const cov = "${{ needs.quality.outputs.coverage }}";
            const lint = "${{ needs.quality.outputs.lint }}";
            const types = "${{ needs.quality.outputs.types }}";
            const bandit = "${{ needs.quality.outputs.bandit }}";
            const snyk = "${{ needs.quality.outputs.snyk }}";
            const version = "${{ needs.prerelease.outputs.new_release_version || 'n/a' }}";

            const body = `
            ## 🎯 CI/CD Summary
            - ✅ Tests: ${tests} (Coverage: ${cov}%)
            - 📝 Lint errors: ${lint}
            - 🔍 Type errors: ${types}
            - 🔒 Bandit issues: ${bandit}
            - 🛡️ Snyk vulnerabilities: ${snyk}
            - 🧪 Next version (predicted): ${version}
            `;

            const {owner, repo} = context.repo;
            const issue_number = context.issue.number;
            const comments = await github.rest.issues.listComments({owner, repo, issue_number});
            const existing = comments.data.find(c => c.body.includes("## 🎯 CI/CD Summary"));
            if (existing) {
              await github.rest.issues.updateComment({owner, repo, comment_id: existing.id, body});
            } else {
              await github.rest.issues.createComment({owner, repo, issue_number, body});
            }

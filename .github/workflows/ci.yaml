name: CI

permissions:
  contents: read
  pull-requests: write
on:
  pull_request:
    branches: ["main"]

env:
  PYTHON_VERSION: "3.11"
  COVERAGE_THRESHOLD: "85"
  SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}

jobs:
  quality:
    runs-on: ubuntu-latest
    outputs:
      tests: ${{ steps.test-summary.outputs.results }}
      coverage: ${{ steps.test-summary.outputs.coverage }}
      lint: ${{ steps.lint.outputs.errors }}
      types: ${{ steps.types.outputs.errors }}
      bandit: ${{ steps.bandit.outputs.issues }}
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      - uses: astral-sh/setup-uv@v3

      - run: uv sync --group ci --extra dev

      - id: lint
        name: 🔍 Ruff Linter
        run: |
          if uv run ruff check . > lint.log 2>&1; then
            echo "errors=0" >> "$GITHUB_OUTPUT"
          else
            ERR=$(grep -c "error" lint.log 2>/dev/null || echo 1)
            echo "errors=$ERR" >> "$GITHUB_OUTPUT"
            exit 1
          fi
      - id: types
        name: 🔍 MyPy Type Checker
        run: |
          if uv run mypy src > types.log 2>&1; then
            echo "errors=0" >> "$GITHUB_OUTPUT"
          else
            ERR=$(grep -c "error:" types.log 2>/dev/null || echo 1)
            echo "errors=$ERR" >> "$GITHUB_OUTPUT"
            exit 1
          fi
      - name: 🧪 Run Tests with Coverage
        id: pytest
        run: |
          export PYTHONPATH=src/
          uv run pytest src/tests/ \
            --cov=src \
            --cov-report=xml:coverage.xml \
            --cov-report=term-missing \
            --cov-branch \
            --cov-fail-under=${COVERAGE_THRESHOLD} \
            --junit-xml=junit.xml \
            -o junit_family=legacy \
            -v --tb=short | tee pytest.log


      - name: Upload test results to Codecov
        if: ${{ !cancelled() }}
        uses: codecov/test-results-action@v1
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
      - name: 📊 Upload Coverage to Codecov
        uses: codecov/codecov-action@v5
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          slug: the-reacher-data/dummy-massive-kit
        if: always()

      - name: 📋 Test Summary
        id: test-summary
        run: |
          sudo apt-get update -qq && sudo apt-get install -y xmlstarlet
          LINE_RATE=$(xmlstarlet sel -t -v "/coverage/@line-rate" coverage.xml 2>/dev/null || echo 0)
          COVERAGE=$(python -c "print(int(float('$LINE_RATE') * 100))")
          PASSED=$(xmlstarlet sel -t -v "count(//testcase[not(failure) and not(error) and not(skipped)])" junit.xml 2>/dev/null || echo 0)
          FAILED=$(xmlstarlet sel -t -v "count(//testcase[failure or error])" junit.xml 2>/dev/null || echo 0)
          SKIPPED=$(xmlstarlet sel -t -v "count(//testcase[skipped])" junit.xml 2>/dev/null || echo 0)
          TOTAL=$((PASSED + FAILED + SKIPPED))

          echo "coverage=$COVERAGE" >> "$GITHUB_OUTPUT"
          echo "results=${PASSED}/${TOTAL} (${SKIPPED} skipped)" >> "$GITHUB_OUTPUT"

      - id: bandit
        name: 🔒 Bandit Security Scanner
        run: |
          uv run bandit -r src --exclude src/tests -f json -o bandit.json
          cat bandit.json
          COUNT=$(jq '.results | length' bandit.json 2>/dev/null || echo 0)
          printf "issues=%s\n" "$COUNT" >> "$GITHUB_OUTPUT"


      - uses: actions/upload-artifact@v4
        with:
          name: ci-artifacts
          path: |
            junit.xml
            coverage.xml
            pytest.log
            lint.log
            types.log
            bandit.json

  prerelease:
    name: Pre-release (TestPyPI)
    runs-on: ubuntu-latest
    needs: quality
    concurrency:
      group: ${{ github.workflow }}-${{ github.head_ref }}
      cancel-in-progress: true
    outputs:
      prerelease_version: ${{ steps.bump.outputs.version }}
    if: |
      needs.quality.result == 'success' &&
      (
        startsWith(github.head_ref, 'feature/') ||
        startsWith(github.head_ref, 'multifeature/') ||
        startsWith(github.head_ref, 'fix/') ||
        startsWith(github.head_ref, 'hotfix/') ||
        startsWith(github.head_ref, 'chore/')
      )
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - uses: astral-sh/setup-uv@v3

      - name: Sync build deps
        run: uv sync --group build

      - name: Compute prerelease version (by branch name)
        id: bump
        shell: bash
        run: |
          BRANCH="${{ github.head_ref }}"
          BASE=$(python3 - <<'PY'
            import tomllib
            with open("pyproject.toml","rb") as f:
            print(tomllib.load(f)["project"]["version"])
            PY
          )
          IFS='.' read -r X Y Z <<< "$BASE"
          if [[ "$BRANCH" == feature!/* || "$BRANCH" == breaking/* ]]; then
            X=$((X+1)); Y=0; Z=0
          elif [[ "$BRANCH" == feature/* || "$BRANCH" == multifeature/* ]]; then
            Y=$((Y+1)); Z=0
          elif [[ "$BRANCH" == fix/* || "$BRANCH" == hotfix/* ]]; then
            Z=$((Z+1))
          elif [[ "$BRANCH" == chore/* ]]; then
            # no bump; keep X.Y.Z
            :
          fi
          PREDICTED="${X}.${Y}.${Z}"
          DEV_TS="${EPOCHSECONDS:-$(date +%s)}"
          VERSION="${PREDICTED}.dev${DEV_TS}"

          sed -i -E "s/^version = \".*\"/version = \"${VERSION}\"/" pyproject.toml
          echo "version=${VERSION}" >> "$GITHUB_OUTPUT"
          echo "📦 Prerelease: ${VERSION}"

      - name: Build package
        run: uv run python -m build

      - name: Check built distributions
        run: uv run twine check dist/*

      - name: Publish to TestPyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          repository-url: https://test.pypi.org/legacy/
          user: __token__
          password: ${{ secrets.TEST_PYPI_API_TOKEN }}
          skip-existing: true


  pr-comment:
    runs-on: ubuntu-latest
    needs: [quality, prerelease]
    concurrency:
      group: ${{ github.workflow }}-${{ github.ref }}
      cancel-in-progress: true
    if: github.event_name == 'pull_request'
    steps:
      - uses: actions/github-script@v7
        with:
          script: |
            const tests = "${{ needs.quality.outputs.tests }}";
            const cov = "${{ needs.quality.outputs.coverage }}";
            const lint = "${{ needs.quality.outputs.lint }}";
            const types = "${{ needs.quality.outputs.types }}";
            const bandit = "${{ needs.quality.outputs.bandit }}";
            const version = "${{ needs.prerelease.outputs.prerelease_version || 'n/a' }}";

            const body = `
            ## 🎯 CI/CD Summary
            - ✅ Tests: ${tests} (Coverage: ${cov}%)
            - 📝 Lint errors: ${lint}
            - 🔍 Type errors: ${types}
            - 🔒 Bandit issues: ${bandit}
            - 🧪 Next version (predicted): ${version}
            `;
            const {owner, repo} = context.repo;
            const issue_number = context.issue.number;
            const comments = await github.rest.issues.listComments({owner, repo, issue_number});
            const existing = comments.data.find(c => c.body.includes("## 🎯 CI/CD Summary"));
            if (existing) {
              await github.rest.issues.updateComment({owner, repo, comment_id: existing.id, body});
            } else {
              await github.rest.issues.createComment({owner, repo, issue_number, body});
            }

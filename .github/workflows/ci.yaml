name: CI/CD Pipeline V2

on:
  push:
    branches: ["feature/**", "fix/**", "hotfix/**", "chore/**", "docs/**", "release/**", "master"]
  pull_request:
    branches: ["master", "release/**"]
    types: [opened, synchronize, reopened, ready_for_review]

env:
  PYTHON_VERSION: "3.11"

jobs:
  # ---------- SETUP ----------
  setup:
    runs-on: ubuntu-latest
    outputs:
      python-version: ${{ steps.extract.outputs.python-version }}
      base-version: ${{ steps.extract.outputs.base-version }}
    steps:
      - uses: actions/checkout@v4
      - id: extract
        name: Extract base version
        run: |
          echo "python-version=${{ env.PYTHON_VERSION }}" >> $GITHUB_OUTPUT
          if [[ -f pyproject.toml ]]; then
            BASE=$(grep -E '^version\s*=' pyproject.toml | sed -E 's/version\s*=\s*"([^"]+)"/\1/')
            BASE=${BASE:-0.1.0}
          else
            BASE="0.1.0"
          fi
          echo "base-version=$BASE" >> $GITHUB_OUTPUT

  # ---------- QUALITY ----------
  quality:
    runs-on: ubuntu-latest
    needs: [setup]
    outputs:
      test-results: ${{ steps.tests.outputs.results }}
      coverage-percent: ${{ steps.tests.outputs.coverage }}
      lint-errors: ${{ steps.lint.outputs.errors }}
      type-errors: ${{ steps.types.outputs.errors }}
      security-issues: ${{ steps.security.outputs.issues }}
    steps:
      - uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ needs.setup.outputs.python-version }}

      - name: Install uv
        uses: astral-sh/setup-uv@v3

      - name: Install CI dependencies
        run: uv sync --group ci

      - name: Ruff (lint)
        id: lint
        run: |
          if uv run ruff check . > lint-output.txt 2>&1; then
            echo "errors=0" >> $GITHUB_OUTPUT
          else
            ERR=$(grep -c "error" lint-output.txt || echo "1")
            echo "errors=$ERR" >> $GITHUB_OUTPUT
            cat lint-output.txt
            exit 1
          fi

      - name: MyPy (type checks)
        id: types
        run: |
          if uv run mypy src > type-output.txt 2>&1; then
            echo "errors=0" >> $GITHUB_OUTPUT
          else
            ERR=$(grep -c "error:" type-output.txt || echo "1")
            echo "errors=$ERR" >> $GITHUB_OUTPUT
            cat type-output.txt
            exit 1
          fi

      - name: Pytest (coverage)
        id: tests
        run: |
          uv run pytest -q \
            --cov=src \
            --cov-report=xml \
            --cov-report=term-missing \
            --junitxml=test-results.xml > test-output.txt 2>&1 || true

          PASSED=$(grep -oE '[0-9]+(?= passed)' test-output.txt | tail -1 || echo "0")
          FAILED=$(grep -oE '[0-9]+(?= failed)' test-output.txt | tail -1 || echo "0")
          TOTAL=$((PASSED + FAILED))
          COVERAGE=$(grep -oE '[0-9]+(?=%)' test-output.txt | tail -1 || echo "0")

          echo "results=${PASSED}/${TOTAL}" >> $GITHUB_OUTPUT
          echo "coverage=${COVERAGE}" >> $GITHUB_OUTPUT

          if [[ "$FAILED" != "0" ]]; then
            cat test-output.txt
            exit 1
          fi

      - name: Bandit (security scan)
        id: security
        run: |
          if uv run bandit -r src -f json > security-output.json 2>&1; then
            echo "issues=0" >> $GITHUB_OUTPUT
          else
            COUNT=$(jq '.results | length' security-output.json || echo 1)
            echo "issues=$COUNT" >> $GITHUB_OUTPUT
            uv run bandit -r src || true
          fi

      - name: Upload coverage (PR only)
        if: github.event_name == 'pull_request'
        uses: codecov/codecov-action@v4
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: ./coverage.xml
          fail_ci_if_error: false

      - name: Upload artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: quality-artifacts
          path: |
            test-results.xml
            coverage.xml
            test-output.txt
            lint-output.txt
            type-output.txt
            security-output.json

  # ---------- PRERELEASE ----------
  prerelease:
    runs-on: ubuntu-latest
    needs: [setup, quality]
    if: |
      github.event_name == 'pull_request' &&
      needs.quality.result == 'success'
    steps:
      - uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ needs.setup.outputs.python-version }}

      - name: Install uv
        uses: astral-sh/setup-uv@v3

      - name: Install build dependencies
        run: uv sync --group build

      - name: Compute prerelease version
        id: ver
        run: |
          BASE="${{ needs.setup.outputs.base-version }}"
          HEAD_REF="${{ github.head_ref }}"
          ATTEMPT=${{ github.run_attempt }}
          SHA=$(git rev-parse --short HEAD)
          COMMIT_INT=$((16#${SHA}))

          X=$(echo $BASE | cut -d. -f1)
          Y=$(echo $BASE | cut -d. -f2)
          Z=$(echo $BASE | cut -d. -f3)

          if [[ "$HEAD_REF" == feature/* ]]; then
            Y=$((Y+1)); Z=0; BUMP="${X}.${Y}.0"
          elif [[ "$HEAD_REF" == fix/* || "$HEAD_REF" == hotfix/* ]]; then
            Z=$((Z+1)); BUMP="${X}.${Y}.${Z}"
          elif [[ "$HEAD_REF" == chore/* || "$HEAD_REF" == docs/* || "$HEAD_REF" == release/* ]]; then
            BUMP="${X}.${Y}.${Z}"
          else
            BUMP="${X}.${Y}.${Z}"
          fi

          VERSION="${BUMP}.dev${COMMIT_INT}"
          if [[ "$ATTEMPT" -gt 1 ]]; then
            VERSION="${VERSION}.post${ATTEMPT}"
          fi

          echo "value=$VERSION" >> $GITHUB_OUTPUT

      - name: Patch version in pyproject
        run: |
          V="${{ steps.ver.outputs.value }}"
          sed -i -E "s/^version = \".*\"/version = \"${V}\"/" pyproject.toml
          echo "pyproject version -> $V"

      - name: Build package
        run: uv run python -m build

      - name: Twine check
        run: uv run twine check dist/*

      - name: Upload to TestPyPI
        env:
          PYPI_TOKEN: ${{ secrets.TEST_PYPI_API_TOKEN }}
        run: |
          uv run twine upload \
            --repository-url https://test.pypi.org/legacy/ \
            -u __token__ -p "${PYPI_TOKEN}" \
            --non-interactive \
            --skip-existing \
            dist/*

      - name: Conventional Commit preview
        id: cc
        run: |
          BRANCH="${{ github.head_ref }}"
          TITLE="${{ github.event.pull_request.title }}"
          TYPE="chore"
          case "$BRANCH" in
            feature/*) TYPE="feat";;
            fix/*|hotfix/*) TYPE="fix";;
            docs/*) TYPE="docs";;
            chore/*) TYPE="chore";;
          esac
          REST="${BRANCH#*/}"
          SCOPE="${REST%%-*}"
          [[ -z "$SCOPE" ]] && SCOPE="core"
          MSG="${TYPE}(${SCOPE}): ${TITLE}"
          echo "message=$MSG" >> $GITHUB_OUTPUT

      - name: PR Summary
        uses: actions/github-script@v7
        with:
          script: |
            const version = `${{ steps.ver.outputs.value }}`;
            const cc = `${{ steps.cc.outputs.message }}`;
            const tests = `${{ needs.quality.outputs.test-results }}`;
            const cov = `${{ needs.quality.outputs.coverage-percent }}`;
            const lint = `${{ needs.quality.outputs.lint-errors }}`;
            const types = `${{ needs.quality.outputs.type-errors }}`;
            const sec = `${{ needs.quality.outputs.security-issues }}`;

            const body = `
            ## 🎯 CI/CD Summary

            ### ✅ Quality
            - Tests: **${tests}** (coverage **${cov}%**)
            - Lint errors: **${lint}**
            - Type errors: **${types}**
            - Security issues: **${sec}**

            ### 🧪 TestPyPI
            - Version: \`${version}\`
            - Link: https://test.pypi.org/project/${context.repo.repo}/${version}/

            ### 📝 Conventional Commit (on squash)
            \`${cc}\`
            `;

            const {owner, repo} = context.repo;
            const issue_number = context.issue.number;

            const comments = await github.rest.issues.listComments({owner, repo, issue_number});
            const existing = comments.data.find(c => c.body?.includes('## 🎯 CI/CD Summary'));

            if (existing) {
              await github.rest.issues.updateComment({owner, repo, comment_id: existing.id, body});
            } else {
              await github.rest.issues.createComment({owner, repo, issue_number, body});
            }

  # ---------- RELEASE ----------
  release:
    runs-on: ubuntu-latest
    needs: [setup, quality]
    if: github.ref == 'refs/heads/master' && needs.quality.result == 'success'
    permissions:
      contents: write
      id-token: write
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ needs.setup.outputs.python-version }}

      - name: Install uv
        uses: astral-sh/setup-uv@v3

      - name: Install release dependencies
        run: uv sync --group build --group docs

      - name: Semantic Release (PyPI + tags + changelog)
        env:
          PYPI_TOKEN: ${{ secrets.PYPI_API_TOKEN }}
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          uv run semantic-release publish

      - name: Build docs
        run: uv run mkdocs build --strict || echo "Docs build failed"

      - name: Deploy docs to GitHub Pages
        uses: peaceiris/actions-gh-pages@v4
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./site

name: CI/CD

on:
  push:
    branches: ["feature/**", "fix/**", "hotfix/**", "chore/**", "release/**", "master"]
  pull_request:
    branches: ["master", "release/**"]
    types: [opened, synchronize, reopened, ready_for_review]

env:
  PYTHON_VERSION: "3.11"

jobs:
  test-and-quality:
    runs-on: ubuntu-latest
    steps:
      - name: 📥 Checkout
        uses: actions/checkout@v4

      - name: 🐍 Setup Python ${{ env.PYTHON_VERSION }}
        id: setup-python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: ⚡ Install UV
        uses: astral-sh/setup-uv@v3


      - name: 📦 Install Dependencies
        run: uv sync --group ci

      - name: 🔍 Lint (Ruff)
        run: uv run ruff check .

      - name: 🔍 Type Check (MyPy)
        run: uv run mypy src/dummy_massivekit

      - name: 🧪 Run Tests with Coverage
        run: uv run pytest src/tests/ --cov=src/dummy_massivekit --cov-report=xml --cov-report=term-missing -v

      - name: 📊 Upload Coverage
        if: github.event_name == 'pull_request'
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.xml
          fail_ci_if_error: false

      - name: 🔒 Security Scan (Bandit)
        run: uv run bandit -r src/dummy_massivekit/ || true

  # 🧪 PRERELEASE: Only in PRs
  prerelease:
    if: github.event_name == 'pull_request' && github.event.pull_request.draft == false
    needs: [test-and-quality]
    runs-on: ubuntu-latest
    steps:
      - name: 📥 Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 🐍 Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: ⚡ Install UV
        uses: astral-sh/setup-uv@v3

      - name: 🔧 Install Build Tools
        run: uv sync --group build

      - name: 🏷️ Generate Prerelease Version
        run: |
          python scripts/patch_version.py ${{ github.event.number }} ${{ github.sha }}

      - name: 📦 Build Package
        run: python -m build

      - name: 🧪 Upload to TestPyPI
        env:
          PYPI_TOKEN: ${{ secrets.TEST_PYPI_API_TOKEN }}
        run: |
          python -m twine upload \
            --repository-url https://test.pypi.org/legacy/ \
            -u __token__ -p "${PYPI_TOKEN}" \
            dist/* || echo "⚠️ TestPyPI upload failed (normal if version exists)"

  # 🚀 RELEASE: Only in push to master
  release:
    if: github.ref == 'refs/heads/master' && github.event_name == 'push'
    needs: [test-and-quality]
    runs-on: ubuntu-latest
    permissions:
      contents: write
      id-token: write
    steps:
      - name: 📥 Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 🐍 Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: ⚡ Install UV
        uses: astral-sh/setup-uv@v3

      - name: 🔧 Install Release Tools
        run: uv sync --group build --group docs

      - name: 🚀 Semantic Release
        env:
          PYPI_TOKEN: ${{ secrets.PYPI_API_TOKEN }}
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: semantic-release publish

      - name: 📚 Build Documentation
        run: |
          uv run mkdocs build --strict || echo "📝 Docs build failed - continuing"

      - name: 🌐 Deploy Docs to GitHub Pages
        if: success()
        uses: peaceiris/actions-gh-pages@v4
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./site

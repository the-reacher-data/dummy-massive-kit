name: CI

on:
  push:
    branches: ["feature/**", "multifeature/**", "fix/**", "hotfix/**", "chore/**", "docs/**"]
  pull_request:
    branches: ["main"]

env:
  PYTHON_VERSION: "3.11"

jobs:
  quality:
    runs-on: ubuntu-latest
    outputs:
      tests: ${{ steps.pytest.outputs.results }}
      coverage: ${{ steps.pytest.outputs.coverage }}
      lint: ${{ steps.lint.outputs.errors }}
      types: ${{ steps.types.outputs.errors }}
      bandit: ${{ steps.bandit.outputs.issues }}
      snyk: ${{ steps.snyk.outputs.issues }}
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      - uses: astral-sh/setup-uv@v3

      - run: uv sync --group ci

      - id: lint
        run: |
          if uv run ruff check . > lint.log 2>&1; then
            echo "errors=0" >> $GITHUB_OUTPUT
          else
            ERR=$(grep -c "error" lint.log || echo "1")
            echo "errors=$ERR" >> $GITHUB_OUTPUT
            exit 1
          fi

      - id: types
        run: |
          if uv run mypy src > types.log 2>&1; then
            echo "errors=0" >> $GITHUB_OUTPUT
          else
            ERR=$(grep -c "error:" types.log || echo "1")
            echo "errors=$ERR" >> $GITHUB_OUTPUT
            exit 1
          fi

      - id: pytest
        run: |
          set -e
          uv run pytest --cov=src --cov-report=xml --cov-report=term-missing -v > pytest.log || true
          PASSED=$(grep -oP '\d+(?= passed)' pytest.log | tail -1 || echo "0")
          FAILED=$(grep -oP '\d+(?= failed)' pytest.log | tail -1 || echo "0")
          TOTAL=$((PASSED + FAILED))
          COVERAGE=$(grep -oP '\d+(?=%)' pytest.log | tail -1 || echo "0")
          echo "results=${PASSED}/${TOTAL}" >> $GITHUB_OUTPUT
          echo "coverage=${COVERAGE}" >> $GITHUB_OUTPUT
          if [ "$COVERAGE" -lt 85 ]; then
            echo "❌ Coverage below 85%"; exit 1
          fi

      - id: bandit
        run: |
          if uv run bandit -r src -f json -o bandit.json; then
            echo "issues=0" >> $GITHUB_OUTPUT
          else
            COUNT=$(jq '.results | length' bandit.json || echo 1)
            echo "issues=$COUNT" >> $GITHUB_OUTPUT
          fi

      - id: snyk
        uses: snyk/actions/python@master
        continue-on-error: true
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --json-file-output=snyk.json
          run: |
            COUNT=$(jq '.vulnerabilities | length' snyk.json || echo 0)
            echo "issues=$COUNT" >> $GITHUB_OUTPUT

      - uses: codecov/codecov-action@v4
        if: github.event_name == 'pull_request'
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: ./coverage.xml
          fail_ci_if_error: false

      - uses: actions/upload-artifact@v4
        with:
          name: ci-artifacts
          path: |
            pytest.log
            coverage.xml
            lint.log
            types.log
            bandit.json
            snyk.json

  prerelease:
    runs-on: ubuntu-latest
    needs: quality
    if: |
      needs.quality.result == 'success' &&
      (startsWith(github.ref, 'refs/heads/feature/') ||
       startsWith(github.ref, 'refs/heads/multifeature/') ||
       startsWith(github.ref, 'refs/heads/fix/') ||
       startsWith(github.ref, 'refs/heads/hotfix/') ||
       github.event_name == 'pull_request')
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      - uses: astral-sh/setup-uv@v3
      - run: uv sync --group build
      - name: Dry-run semantic-release
        id: semrel
        uses: cycjimmy/semantic-release-action@v4
        with:
          semantic_version: 20
          extra_plugins: |
            @semantic-release/changelog
            @semantic-release/git
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        continue-on-error: true
      - run: |
          echo "Next version (predicted): ${{ steps.semrel.outputs.new_release_version }}"

  pr-comment:
    runs-on: ubuntu-latest
    needs: [quality, prerelease]
    if: github.event_name == 'pull_request'
    steps:
      - uses: actions/github-script@v7
        with:
          script: |
            const tests = "${{ needs.quality.outputs.tests }}";
            const cov = "${{ needs.quality.outputs.coverage }}";
            const lint = "${{ needs.quality.outputs.lint }}";
            const types = "${{ needs.quality.outputs.types }}";
            const bandit = "${{ needs.quality.outputs.bandit }}";
            const snyk = "${{ needs.quality.outputs.snyk }}";
            const version = "${{ needs.prerelease.outputs.new_release_version || 'n/a' }}";
            const body = `
            ## 🎯 CI/CD Summary
            - **Tests**: ${tests} (coverage ${cov}%)
            - **Lint errors**: ${lint}
            - **Type errors**: ${types}
            - **Bandit issues**: ${bandit}
            - **Snyk vulnerabilities**: ${snyk}
            - **Next version (predicted)**: ${version}
            `;
            const {owner, repo} = context.repo;
            const issue_number = context.issue.number;
            const comments = await github.rest.issues.listComments({owner, repo, issue_number});
            const existing = comments.data.find(c => c.body.includes("## 🎯 CI/CD Summary"));
            if (existing) {
              await github.rest.issues.updateComment({owner, repo, comment_id: existing.id, body});
            } else {
              await github.rest.issues.createComment({owner, repo, issue_number, body});
            }

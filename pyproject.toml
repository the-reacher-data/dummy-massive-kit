[project]
name = "dummy_massivekit"
version = "0.2.0"
description = "MassiveKit: Declarative framework for APIs, ETL and Microservices with Clean Code and SOLID principles"
readme = "README.md"
license = { text = "MIT" }
requires-python = ">=3.11"
authors = [{ name = "MassiveDataScope" }]
keywords = ["fastapi", "clean-architecture", "solid", "omegaconf"]

dependencies = [
  "pydantic>=2.8",
  "omegaconf>=2.3",
  "typing-extensions>=4.9",
  "anyio>=4.4",
]

[build-system]
requires = ["setuptools>=65", "wheel"]
build-backend = "setuptools.build_meta"

[project.optional-dependencies]
api = [
  "fastapi>=0.115",
  "uvicorn[standard]>=0.30",
  "orjson>=3.10",
  "httpx>=0.27",
  "sqlalchemy>=2.0",
  "asyncpg>=0.29",
  "boto3>=1.34",
]
dev = [
  "ruff>=0.6",
  "mypy>=1.11",
  "pytest>=8.3",
  "pytest-asyncio>=0.23",
  "pytest-cov>=5.0",
  "coverage[toml]>=7.6",
  "pre-commit>=3.8",
  "commitizen>=3.28",
  "bandit>=1.7",
  "black>=24.8",
  "isort>=5.13",
  "pyupgrade>=3.15",

]

[dependency-groups]
ci = ["pytest-cov>=5.0", "ruff>=0.6", "mypy>=1.11", "bandit>=1.7"]
build = ["build>=1.0", "twine>=5.0", "python-semantic-release>=9.0", "tomli>=2.0", "tomli-w>=1.0"]
docs = ["mkdocs-material>=9.5", "mkdocstrings[python]>=0.25"]

[tool.setuptools.packages.find]
where = ["src"]
exclude = ["tests*"]

# --- Ruff ---
[tool.ruff]
line-length = 100
target-version = "py311"
exclude = ["src/tests/fixtures", "scripts"]

[tool.ruff.lint]
select = ["E", "F", "I", "UP", "B", "W", "N", "ASYNC", "PL", "RUF"]

# --- isort ---
[tool.isort]
profile = "ruff"
line_length = 100
combine_as_imports = true


# --- mypy ---
[tool.mypy]
python_version = "3.11"
strict = true
warn_unused_ignores = true
plugins = ["pydantic.mypy"]
exclude = ["src/tests/.*", "tests/.*"]

# --- Pytest ---
[tool.pytest.ini_options]
testpaths = ["src/tests"]

# --- Coverage ---
[tool.coverage.run]
source = ["src/"]
omit = ["src/tests/*"]
branch = true

# --- Bandit ---
[tool.bandit]
exclude_dirs = ["tests", "src/tests"]

# --- Commitizen ---
[tool.commitizen]
name = "cz_conventional_commits"
version = "0.2.0"
tag_format = "v$version"
update_changelog_on_bump = true
changelog_file = "CHANGELOG.md"

# --- Semantic Release ---
[tool.semantic_release]
version_source = "tag"
commit_parser = "conventional"
changelog_file = "CHANGELOG.md"
build_command = "uv run python -m build"
upload_to_pypi = true
upload_to_release = true
version_toml = [
  ["pyproject.toml", 'version = "(?P<version>.*)"']
]

[tool.semantic_release.branches.main]
match = "main"
prerelease = false

[tool.semantic_release.branches.release]
match = "release/.*"
prerelease = true

[tool.semantic_release.commit_parser_options]
allowed_types = ["feat", "fix", "hotfix", "docs", "chore", "refactor", "perf"]

[tool.semantic_release.changelog]
ignore_types = ["chore", "docs"]

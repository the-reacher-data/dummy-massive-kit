[project]
name = "dummy_massivekit"
version = "0.1.0"
description = "MassiveKit: Declarative framework for APIs, ETL and Microservices with Clean Code and SOLID principles"
readme = "README.md"
license = {text = "MIT"}
requires-python = ">=3.11"
authors = [{name="MassiveDataScope"}]
keywords = ["fastapi", "clean-architecture", "solid", "omegaconf"]

dependencies = [
  "pydantic>=2.8",
  "omegaconf>=2.3",
  "typing-extensions>=4.9",
  "anyio>=4.4",
]

[build-system]
requires = ["setuptools>=65", "wheel"]
build-backend = "setuptools.build_meta"

[project.optional-dependencies]
api = [
  "fastapi>=0.115",
  "uvicorn[standard]>=0.30",
  "orjson>=3.10",
  "httpx>=0.27",
  "sqlalchemy>=2.0",
  "asyncpg>=0.29",
  "boto3>=1.34",
]
dev = [
  "ruff>=0.6",
  "mypy>=1.11",
  "pytest>=8.3",
  "pytest-asyncio>=0.23",
  "coverage[toml]>=7.6",
  "pre-commit>=3.8",
  "commitizen>=3.28",
  "bandit>=1.7",
  "black>=24.8",
  "isort>=5.13",
  "pyupgrade>=3.15",
]



[tool.setuptools.packages.find]
where = ["src"]
exclude = ["tests*"]

# --- Ruff (lint + import order + formatter opcional) ---
[tool.ruff]
line-length = 100
target-version = "py311"
exclude = ["src/tests/fixtures"]

[tool.ruff.lint]
select = ["E","F","I","UP","B","W","N","ASYNC","PL","RUF"]
ignore = ["ANN101","ANN102"]

# --- isort (si prefieres isort separado del formatter) ---
[tool.isort]
profile = "black"
line_length = 100
combine_as_imports = true

# --- Black ---
[tool.black]
line-length = 100
target-version = ["py311"]

# --- mypy ---
[tool.mypy]
python_version = "3.11"
strict = true
warn_unused_ignores = true
plugins = ["pydantic.mypy"]

# --- Pytest ---
[tool.pytest.ini_options]
testpaths = ["src/tests"]

# --- Coverage ---
[tool.coverage.run]
source = ["src/dummy_massivekit"]
omit = ["src/tests/*"]
branch = true

[tool.coverage.report]
show_missing = true
skip_covered = true

# --- Commitizen: Conventional Commits ---
[tool.commitizen]
name = "cz_conventional_commits"
version = "0.1.0"
tag_format = "v$version"
update_changelog_on_bump = true
changelog_file = "CHANGELOG.md"

[tool.semantic_release]
version_source = "tag"
branch = "master"
commit_parser = "angular"              # Conventional Commits
tag_format = "v{version}"
changelog_file = "CHANGELOG.md"
build_command = "python -m build"
upload_to_pypi = true
upload_to_release = true
prerelease_token = "dev"

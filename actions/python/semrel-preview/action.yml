name: "Semantic Release Preview"
description: "Generate changelog preview, publish pre-releases to TestPyPI, and update PR comment"

inputs:
  github-token:
    description: "GitHub token for posting PR comments"
    required: true
  testpypi-token:
    description: "Token for TestPyPI"
    required: true

runs:
  using: "composite"
  steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        ref: ${{ github.head_ref }}

    - name: Semantic Release (preview to TestPyPI)
      uses: python-semantic-release/python-semantic-release@v10.4.1
      env:
        GITHUB_TOKEN: ${{ inputs.github-token }}
        PYPI_TOKEN: ${{ inputs.testpypi-token }}
        PYPI_REPOSITORY: testpypi

    - name: Extract changelog (latest section only)
      shell: bash
      run: |
        touch CHANGELOG.md
        awk 'BEGIN{p=0} /^## /{if(p) exit; p=1} p' CHANGELOG.md > raw_changelog.md

    - name: Build changelog comment
      id: build
      shell: bash
      run: |
        uv run python ${{ github.action_path }}/src/builder.py \
          --input raw_changelog.md \
          --template ${{ github.action_path }}/src/templates/report.md.j2 \
          --output changelog_preview.md \
          --version-file .semantic_release_version  # generado por la action oficial

    - name: Post / update PR comment
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        github-token: ${{ inputs.github-token }}
        script: |
          const fs = require('fs');
          const body = fs.readFileSync('changelog_preview.md', 'utf8');
          const tag = '<!-- massive-devops-changelog-preview -->';
          const full = tag + '\n' + body;

          const { owner, repo } = context.repo;
          const issue_number = context.issue.number;

          const { data: comments } = await github.rest.issues.listComments({ owner, repo, issue_number });
          const existing = comments.find(c => c.body && c.body.includes(tag));

          if (existing) {
            await github.rest.issues.updateComment({ owner, repo, comment_id: existing.id, body: full });
          } else {
            await github.rest.issues.createComment({ owner, repo, issue_number, body: full });
          }

name: "Lint & Type Comment"
description: "Run Ruff + MyPy and post a PR comment"

inputs:
  src-dir:
    default: "src"
    required: false
  github-token:
    required: true
  fail-on:
    required: false
    default: "any" # or "none"
  exclude:
    required: false
    default: "tests,migrations"

outputs:
  ruff_issues:
    value: ${{ steps.build.outputs.ruff_issues }}
  mypy_issues:
    value: ${{ steps.build.outputs.mypy_issues }}

runs:
  using: "composite"
  steps:
    - uses: actions/setup-python@v5
      with:
        python-version: "3.11"
    - uses: astral-sh/setup-uv@v3

    - name: Install tools
      shell: bash
      run: uv pip install ruff mypy jinja2

    - name: Run Ruff
      shell: bash
      run: |
        uv run ruff check "${{ inputs.src-dir }}" --exclude "${{ inputs.exclude }}" --output-format json > ruff.json || true

    - name: Run MyPy
      shell: bash
      run: |
        EXCLUDE_REGEX=$(echo "${{ inputs.exclude }}" | sed 's/,/|/g')
        uv run mypy "${{ inputs.src-dir }}" --exclude "$EXCLUDE_REGEX" --junit-xml mypy.xml || true

    - name: Build lint report
      id: build
      shell: bash
      run: |
        uv run python ${{ github.action_path }}/src/builder.py \
          --ruff ruff.json \
          --mypy mypy.xml  \
          --template ${{ github.action_path }}/src/templates/report.md.j2 \
          --output lint_report.md \
          --outputs $GITHUB_OUTPUT \
          --fail-on "${{ inputs.fail-on }}"

    - name: Post / update PR comment
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        github-token: ${{ inputs.github-token }}
        script: |
          const fs = require('fs');
          const body = fs.readFileSync('lint_report.md', 'utf8');
          const tag = '<!-- massive-devops-lint -->';
          const full = tag + '\n' + body;
          const { owner, repo } = context.repo;
          const issue_number = context.issue.number;
          const { data: comments } = await github.rest.issues.listComments({ owner, repo, issue_number });
          const existing = comments.find(c => c.body && c.body.includes(tag));
          if (existing) {
            await github.rest.issues.updateComment({ owner, repo, comment_id: existing.id, body: full });
          } else {
            await github.rest.issues.createComment({ owner, repo, issue_number, body: full });
          }

    - name: Fail if blocking
      if: always()
      shell: bash
      run: |
        uv run python ${{ github.action_path }}/src/builder.py \
          --ruff ruff.json \
          --mypy mypy.xml  \
          --fail-on "${{ inputs.fail-on }}" \
          --check-exit

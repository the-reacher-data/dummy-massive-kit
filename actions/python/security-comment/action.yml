name: "Bandit Comment"
description: "Run Bandit security analysis and post a PR comment."

inputs:
  src-dir:
    description: "Source folder to scan with Bandit"
    required: false
    default: "src"
  github-token:
    description: "GitHub token for posting PR comments"
    required: true
  fail-on:
    description: "Severity level to fail on (none, low, medium, high)"
    required: false
    default: "none"

outputs:
  bandit_issues:
    description: "Number of Bandit issues found"
    value: ${{ steps.build.outputs.bandit_issues }}
  bandit_exit:
    description: "Exit code from Bandit builder (0=pass,1=fail)"
    value: ${{ steps.build.outputs.bandit_exit }}

runs:
  using: "composite"
  steps:
    - name: Ensure Python & uv
      uses: actions/setup-python@v5
      with:
        python-version: "3.11"
    - uses: astral-sh/setup-uv@v3

    - name: Install Bandit & Jinja2
      shell: bash
      run: uv pip install bandit jinja2

    - name: Run Bandit
      shell: bash
      continue-on-error: true
      run: |
        uv run bandit -r "${{ inputs.src-dir }}" -f json -o bandit.json || true

    - name: Build Bandit report
      id: build
      shell: bash
      run: |
        uv run python "${{ github.action_path }}/src/builder_bandit.py" \
          --input bandit.json \
          --template "${{ github.action_path }}/src/templates/bandit_report.md.j2" \
          --output bandit_report.md \
          --outputs $GITHUB_OUTPUT \
          --fail-on "${{ inputs.fail-on }}"

    - name: Post / update PR comment
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      env:
        BODY_FILE: bandit_report.md
      with:
        github-token: ${{ inputs.github-token }}
        script: |
          const fs = require('fs');
          const body = fs.readFileSync(process.env.BODY_FILE, 'utf8');
          const tag = '<!-- massive-devops-bandit -->';
          const full = tag + '\n' + body;

          const { owner, repo } = context.repo;
          const issue_number = context.issue.number;

          const { data: comments } = await github.rest.issues.listComments({ owner, repo, issue_number });
          const existing = comments.find(c => c.body && c.body.includes(tag));

          if (existing) {
            await github.rest.issues.updateComment({ owner, repo, comment_id: existing.id, body: full });
          } else {
            await github.rest.issues.createComment({ owner, repo, issue_number, body: full });
          }

    - name: Fail if blocking issues
      if: always()
      shell: bash
      run: |
        if [ "${{ steps.build.outputs.bandit_exit }}" != "0" ]; then
          echo "‚ùå Blocking Bandit issues found"
          exit 1
        fi
